[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ python_package_distribution_name }}"
description = " {{ project_description | replace('"', "'") }}"
readme = "README.md"
requires-python = ">={{ minimum_python_version }},<{{ maximum_python_version  }}"
dependencies = []


[tool.uv]
# Tell uv to ignore constraints on the main package.
# This is needed when the current project doesn't have Git tags (fork, CI).
override-dependencies = ["{{ python_package_distribution_name }}"]
sources = { {{ python_package_distribution_name }} = { workspace = true } }

[project.optional-dependencies]
plot = [
  "matplotlib>=3.6.3",
  "panel>=1.5",
  "hvplot>=0.11",
]
ds = [
"pandas>=2.2",
"numpy>=2.1",
]

[dependency-groups]
lint = [
    "ruff>=0.4",
]
dev = [
ipykernel
]

[project.scripts]
{% if jupyter_notebooks %}
install-kernel = """\
	uv sync && \
	uv run ipython kernel install --user \
	--name={{ python_package_import_name }} \
	--display-name='Python {{ minimum_python_version }} / {{ project_name }}' \
	"""
{% endif %}
{% if linter %}
install-lint = ["pre-commit install --install-hooks {args}"]
reinstall-lint = [
	"pre-commit uninstall && pre-commit clean && pre-commit gc",
	"install",
	]
run-lint = ["pre-commit run {args}"]
run-all-lint = ["pre-commit run --all-files {args}"]
update-lint = ["pre-commit autoupdate {args}"]
{% endif %}

{% if linter %}
[tool.ruff]
extend-exclude [".*"]
force-exclude = true
line-length = 120
src = ["src"]
target-version = "{{ minimum_python_version | to_pyver_tag }}"

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore-init-module-imports = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"
{% endif %}
